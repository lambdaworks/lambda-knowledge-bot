name: Deploy server to AWS

on:
  push:
    branches: [ "main" ]
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::195175520793:role/lambdaworks-bot-github-actions
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set short sha
        id: sha_short
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Dockerfile
        run: |
          cd $GITHUB_WORKSPACE/server
          sudo apt-get update
          sudo apt-get install apt-transport-https curl gnupg -yqq
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
          sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
          sudo apt-get update
          sudo apt-get install sbt -y

          sbt docker:stage
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: /home/runner/work/lambda-knowledge-bot/lambda-knowledge-bot/server/modules/knowledge-bot/target/docker/stage/
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/knowle:${{ steps.sha_short.outputs.sha_short }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/task-definition-knowle.json
          container-name: knowle
          image: ${{ steps.login-ecr.outputs.registry }}/knowle:${{ steps.sha_short.outputs.sha_short }}
          environment-variables: |
            DYNAMODB_REGION=${{ secrets.DYNAMODB_REGION }}
            DYNAMODB_TABLE_NAME=${{ secrets.DYNAMODB_TABLE_NAME }}
            CLICKUP_COMMON_DOC_URL=${{ secrets.CLICKUP_COMMON_DOC_URL }}
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            GITHUB_USER=${{ secrets.GITHUB_USER }}
            GITHUB_REPO=${{ secrets.GITHUB_REPO }}
            GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET }}
            QDRANT_CLUSTER_URL=${{ secrets.QDRANT_CLUSTER_URL }}
            QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
            QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }}
            SESSION_SERVER_SECRET=${{ secrets.SESSION_SERVER_SECRET }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            SLACK_TOKEN=${{ secrets.SLACK_TOKEN }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: knowle
          cluster: lambdaworks-cluster
          force-new-deployment: true
